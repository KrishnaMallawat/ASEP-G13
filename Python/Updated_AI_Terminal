import PySimpleGUI as sg
import os
import subprocess
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import make_pipeline

sentences = [
    "make a folder xyz",
    "create new folder project",
    "add a file notes.txt",
    "create file test.py",
    "delete folder old_project",
    "remove file trash.py",
    "erase folder backup",
    "need a new folder",
    "need a new file",
    "make a folder named xyz",
    "delete all text files",
    "delete file named creative stuff",
    "create folder named delete these",
    "delete folder named create jobs",
    "create file named stuff",
]

labels = [
    "create_folder",
    "create_folder",
    "create_file",
    "create_file",
    "delete_folder",
    "delete_file",
    "delete_folder",
    "create_folder",
    "create_file",
    "create_folder", 
    "delete_file",
    "delete_file",
    "create_folder",
    "delete_folder",
    "create_file"
]

model = make_pipeline(CountVectorizer(ngram_range=(1, 3)), LogisticRegression())
model.fit(sentences, labels)

def to_do_commands(intent, name):
    try:
        if intent == "create_folder":
            os.makedirs(name, exist_ok=True)
            return f"Folder '{name}' created."
        elif intent == "create_file":
            open(name, 'w').close()
            return f"File '{name}' created."
        elif intent == "delete_folder":
            if os.path.isdir(name):
                subprocess.run(["rm", "-r", name], check=True)
                return f"Folder '{name}' deleted."
            else:
                return f"Folder '{name}' does not exist."
        elif intent == "delete_file":
            if os.path.isfile(name):
                subprocess.run(["rm", name], check=True)
                return f"File '{name}' deleted."
            else:
                return f"File '{name}' does not exist."
        else:
            return "Unknown intent."
    except Exception as e:
        return f"Error: {str(e)}"

layout = [
    [sg.Text("Enter Command:"), sg.Input(key='-COMMAND-', size=(40, 1)), sg.Button('Run Command')],
    [sg.Text("Or use buttons below:")],
    [sg.Text("Name:"), sg.Input(key='-NAME-', size=(20, 1)), 
     sg.Button('Create File'), sg.Button('Create Folder'), sg.Button('Delete File'), sg.Button('Delete Folder')],
    [sg.Multiline(key='-OUTPUT-', size=(60, 15), autoscroll=True, disabled=True)]
]

window = sg.Window("File/Folder Command GUI", layout)

while True:
    event, values = window.read()
    if event == sg.WINDOW_CLOSED:
        break

    output = ""
    if event == 'Run Command':
        command = values['-COMMAND-']
        if not command.strip():
            output = "Please enter a command."
        else:
            command_bits = command.split()
            name = "unnamed"
            if "name" in command_bits:
                idx = command_bits.index("name")
                if idx + 1 < len(command_bits):
                    name = command_bits[idx + 1]
            elif "named" in command_bits:
                idx = command_bits.index("named")
                if idx + 1 < len(command_bits):
                    name = command_bits[idx + 1]
            else:
                if len(command_bits) > 2:
                    name = command_bits[-1]

            intent = model.predict([command])[0]
            output = to_do_commands(intent, name)

    elif event == 'Create File':
        name = values['-NAME-'].strip()
        if name:
            output = to_do_commands("create_file", name)
        else:
            output = "Please enter a file name."
    elif event == 'Create Folder':
        name = values['-NAME-'].strip()
        if name:
            output = to_do_commands("create_folder", name)
        else:
            output = "Please enter a folder name."
    elif event == 'Delete File':
        name = values['-NAME-'].strip()
        if name:
            output = to_do_commands("delete_file", name)
        else:
            output = "Please enter a file name."
    elif event == 'Delete Folder':
        name = values['-NAME-'].strip()
        if name:
            output = to_do_commands("delete_folder", name)
        else:
            output = "Please enter a folder name."

    if output:
        window['-OUTPUT-'].update(output + "\n", append=True)

window.close()
